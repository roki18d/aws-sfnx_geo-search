{
  "Comment": "A description of my state machine",
  "StartAt": "Get Coordinates",
  "States": {
    "Get Coordinates": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultPath": "$.results.coordinates",
      "ResultSelector": {
        "statusCode.$": "$.Payload.statusCode",
        "body.$": "$.Payload.body"
      },
      "Parameters": {
        "FunctionName.$": "$$.Execution.Input['function_arns']['get-coordinates']",
        "Payload": {
          "query.$": "$$.Execution.Input['query']"
        }
      },
      "Next": "Reverse Address"
    },
    "Reverse Address": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultPath": "$.results.address",
      "ResultSelector": {
        "statusCode.$": "$.Payload.statusCode", 
        "body.$": "$.Payload.body"
      },
      "Parameters": {
        "FunctionName.$": "$$.Execution.Input['function_arns']['reverse-address']",
        "Payload.$": "$.results.coordinates.body"
      },
      "Next": "Validate Query"
    },
    "Validate Query": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultPath": "$.results.validation",
      "ResultSelector": {
        "statusCode.$": "$.Payload.statusCode",
        "body.$": "$.Payload.body"
      },
      "Parameters": {
        "FunctionName.$": "$$.Execution.Input['function_arns']['validate-query']",
        "Payload": {
          "address_query.$": "$$.Execution.Input['query']",
          "address_reversed.$": "$.results.address.body.address"
        }
      },
      "Next": "Valid?"
    },
    "Valid?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.results.validation.body.query_isvalid",
          "BooleanEquals": true,
          "Next": "Parallel",
          "Comment": "Query is valid. "
        }
      ],
      "Default": "Notify FAIL"
    },
    "Notify FAIL": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn.$": "$$.Execution.Input['topic_arns']['fail']"
      },
      "Next": "Fail"
    },
    "Parallel": {
      "Type": "Parallel",
      "Next": "Write DynamoDB",
      "Branches": [
        {
          "StartAt": "Get Placeinfo",
          "States": {
            "Get Placeinfo": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.response",
              "ResultPath": "$.response",
              "ResultSelector": {
                "placeinfo": {
                  "statusCode.$": "$.Payload.statusCode",
                  "body.$": "$.Payload.body"
                }
              },
              "Parameters": {
                "FunctionName.$": "$$.Execution.Input['function_arns']['get-placeinfo']",
                "Payload.$": "$.results.coordinates.body"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Altitude",
          "States": {
            "Get Altitude": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.response",
              "ResultPath": "$.response",
              "ResultSelector": {
                "altitude": {
                  "statusCode.$": "$.Payload.statusCode",
                  "body.$": "$.Payload.body"
                }
              },
              "Parameters": {
                "FunctionName.$": "$$.Execution.Input['function_arns']['get-altitude']",
                "Payload.$": "$.results.coordinates.body"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Weather",
          "States": {
            "Get Weather": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.response",
              "ResultPath": "$.response",
              "ResultSelector": {
                "weather": {
                  "statusCode.$": "$.Payload.statusCode",
                  "body.$": "$.Payload.body"
                }
              },
              "Parameters": {
                "FunctionName.$": "$$.Execution.Input['function_arns']['get-weather']",
                "Payload.$": "$.results.coordinates.body"
              },
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Notify FAIL"
        }
      ],
      "ResultPath": "$.results.parallel"
    },
    "Write DynamoDB": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultPath": "$.results.writedb",
      "ResultSelector": {
        "statusCode.$": "$.Payload.statusCode",
        "body.$": "$.Payload.body"
      },
      "Parameters": {
        "FunctionName.$": "$$.Execution.Input['function_arns']['write-dynamodb']",
        "Payload": {
          "states_execution_id.$": "$$.Execution.Id",
          "query.$": "$$.Execution.Input['query']",
          "result.$": "$.results.parallel"
        }
      },
      "Next": "Notify SUCCESS"
    },
    "Notify SUCCESS": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn.$": "$$.Execution.Input['topic_arns']['success']"
      },
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}